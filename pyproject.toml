[build-system]
requires = ["setuptools>=61.0", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "xpcs-toolkit"
dynamic = ["version"]
description = "XPCS Toolkit: A python-based interactive tool to visualize and model XPCS dataset"
readme = "README.rst"
requires-python = ">=3.12"
authors = [{name = "Miaoqi Chu", email = "mqichu@anl.gov"}]
maintainers = [{name = "Miaoqi Chu", email = "mqichu@anl.gov"}]

classifiers = [
    "Development Status :: 4 - Beta",  
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Natural Language :: English"
]

license = {text = "MIT"}
keywords = ["XPCS", "X-ray", "photon correlation spectroscopy", "synchrotron", "visualization", "science"]

dependencies = [
    "pyside6",
    "numpy",
    "scipy",
    "h5py",
    "matplotlib",
    "pyqtgraph",
    "pandas",
    "scikit-learn",
    "joblib",
    "tqdm",
    "psutil",
    "hdf5plugin"
]

[project.scripts]
xpcs-toolkit = "xpcs_toolkit.cli:main"
pyxpcsviewer = "xpcs_toolkit.cli:main"
run_viewer = "xpcs_toolkit.cli:main"

[project.optional-dependencies]
dev = [
    "coverage",
    "pytest",
    "pytest-cov",
    "pytest-xdist",
    "pytest-benchmark",
    "pytest-mock",
    "pytest-timeout",
    "pytest-sugar",
    "pytest-html",
    "pytest-qt",
    "hypothesis",
    "mypy",
    "ruff",
    "bandit[toml]",
    "pre-commit"
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
    "myst-parser"
]
validation = [
    "memory-profiler",
    "line-profiler",
    "py-spy"
]
performance = [
    "pytest-benchmark",
    "memory-profiler",
    "pympler"
]

[project.urls]
bugs = "https://github.com/imewei/XPCS-Toolkit/issues"
changelog = "https://github.com/imewei/XPCS-Toolkit/blob/master/HISTORY.rst"
homepage = "https://github.com/imewei/XPCS-Toolkit"
repository = "https://github.com/imewei/XPCS-Toolkit.git"
documentation = "https://github.com/imewei/XPCS-Toolkit/tree/master/docs"

[tool.setuptools]

[tool.setuptools_scm]
version_scheme = "post-release"
local_scheme = "node-and-timestamp"

[tool.setuptools.packages.find]
where = ["."]

[tool.setuptools.package-data]
"xpcs_toolkit" = ["configure/*.json", "ui/*.ui"]
"xpcs_toolkit.ui.resources" = ["*.qrc", "*.png"]
"*" = ["*.md", "*.rst", "*.txt", "*.yaml", "*.yml"]

# Mypy
[tool.mypy]
files = "."
strict = true
warn_unreachable = true
warn_no_return = true

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
disable_error_code = "attr-defined"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=xpcs_toolkit",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--tb=short",
    "--durations=10"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests across multiple components",
    "performance: Performance and benchmark tests",
    "gui: GUI tests requiring display (may be interactive)",
    "slow: Tests that take more than 1 second",
    "scientific: Tests that verify scientific accuracy and algorithms",
    "parametrize: Parametrized tests with multiple inputs",
    "error_handling: Tests for error conditions and edge cases",
    "end_to_end: Full workflow tests from file load to analysis",
    "memory: Memory usage and leak detection tests",
    "threading: Multithreading and async operation tests",
    "logging: Logging system functionality tests",
    "stress: Resource exhaustion and extreme load tests",
    "edge_cases: Boundary conditions and extreme input tests",
    "system_dependent: Tests that depend on system resources or environment",
    "flaky: Tests that may fail intermittently due to external factors",
    "data_integrity: Tests that verify data accuracy and corruption handling"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::RuntimeWarning:numpy.*",
    "ignore::FutureWarning:pandas.*",
    "ignore::UserWarning:matplotlib.*"
]
timeout = 300

# Test suite profiles
# Run with: pytest -m "not stress" to skip stress tests
# Run with: pytest -m "unit or integration" to run core tests only
# Run with: pytest -m "stress" to run only stress tests
# Run with: pytest -m "not (stress or system_dependent)" for CI environments
timeout_method = "thread"

# Coverage configuration
[tool.coverage.run]
source = ["xpcs_toolkit"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "xpcs_toolkit/ui/*",  # GUI code hard to test
    "xpcs_toolkit/icons_rc.py",  # Generated resource file
    "*/validation/*",  # Validation scripts
    "*/scripts/*",  # Utility scripts
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "except ImportError:",
    "if TYPE_CHECKING:"
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "W", "C90", "I", "N", "UP", "S", "B", "A", "C4", "PIE", "T20", "RET", "SIM", "ARG", "ERA", "PL", "RUF"]
ignore = ["E501", "RET504", "S101", "PLR0913"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",    # Use of assert detected (OK in tests)
    "ARG",     # Unused function args (fixtures)
    "FBT",     # Boolean trap (OK in tests)
    "PLR2004", # Magic value used in comparison (OK in tests)
    "SLF001",  # Private member access (OK in tests)
    "T201",    # Print statements (OK in tests)
]
"validation/*" = [
    "T201",    # Print statements (OK in validation scripts)
    "S101",    # Assert statements (OK in validation)
]
"scripts/*" = [
    "T201",    # Print statements (OK in utility scripts)
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "validation", "docs"]
skips = ["B101", "B601"]  # Skip assert and shell usage in specific contexts

name: CI

on:
  push:
    branches: [ master, main, develop ]
    paths-ignore:
      - '*.md'
      - '*.rst'
      - 'docs/**'
      - 'CHANGELOG*'
      - 'HISTORY*'
      - 'LICENSE*'
  pull_request:
    branches: [ master, main, develop ]
    paths-ignore:
      - '*.md'
      - '*.rst'
      - 'docs/**'
      - 'CHANGELOG*'
      - 'HISTORY*'
      - 'LICENSE*'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual CI run'
        required: false
        default: 'Manual testing'
      test_level:
        description: 'Test level to run'
        required: false
        default: 'core'
        type: choice
        options:
          - 'smoke'
          - 'core'
          - 'full'
          - 'performance'

# Cancel previous runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quick smoke tests for fast feedback
  smoke-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install -e .[dev] --no-deps --prefer-binary
        pip install numpy scipy matplotlib pyside6 h5py pyqtgraph --prefer-binary

    - name: Run smoke tests
      run: |
        pytest -m "smoke" --tb=short --disable-warnings -q

  # Main test matrix
  test:
    runs-on: ${{ matrix.os }}
    needs: smoke-test
    if: always() && (needs.smoke-test.result == 'success' || github.event_name != 'pull_request')
    timeout-minutes: 45

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12", "3.13"]
        exclude:
          # Reduce matrix size for faster execution
          - os: windows-latest
            python-version: "3.13"
          - os: macos-latest
            python-version: "3.13"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper version detection

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          libgl1-mesa-glx libegl1-mesa libxrandr2 libxss1 \
          libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6 \
          xvfb

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install -e .[dev] --prefer-binary

    - name: Cache test data
      uses: actions/cache@v4
      with:
        path: ~/.cache/xpcs-toolkit
        key: ${{ runner.os }}-test-data-v1

    - name: Lint with ruff (fast)
      if: matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'
      run: |
        ruff check --output-format=github .
        ruff format --check .

    - name: Type check with mypy
      if: matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'
      run: |
        mypy xpcs_toolkit --ignore-missing-imports --show-error-codes
      continue-on-error: true

    - name: Determine test level
      id: test-level
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "level=core" >> $GITHUB_OUTPUT
        elif [ "${{ github.event.inputs.test_level }}" != "" ]; then
          echo "level=${{ github.event.inputs.test_level }}" >> $GITHUB_OUTPUT
        else
          echo "level=full" >> $GITHUB_OUTPUT
        fi

    - name: Test with pytest
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: ":99"
      run: |
        # Start virtual display for GUI tests on Linux
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          Xvfb :99 -screen 0 1024x768x24 &
          sleep 2
        fi

        # Run tests based on level
        case "${{ steps.test-level.outputs.level }}" in
          "smoke")
            pytest -m "smoke" --tb=short -q
            ;;
          "core")
            pytest -m "(unit or integration) and not slow" \
              --cov=xpcs_toolkit --cov-report=xml --cov-report=term-missing \
              --tb=short -x
            ;;
          "performance")
            pytest -m "performance and not stress" --benchmark-only
            ;;
          *)
            pytest -m "not (stress or system_dependent)" \
              --cov=xpcs_toolkit --cov-report=xml --cov-report=term-missing \
              --tb=short --durations=10 -n auto
            ;;
        esac

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12' && contains(steps.test-level.outputs.level, 'core|full')
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false
        flags: ${{ matrix.os }}-py${{ matrix.python-version }}

    - name: Test package installation
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      run: |
        # Quick installation test
        pip install -e . --force-reinstall --no-deps
        python -c "import xpcs_toolkit; print(f'XPCS Toolkit {xpcs_toolkit.__version__} imported successfully')"

  # Fast parallel build job
  build:
    runs-on: ubuntu-latest
    needs: smoke-test
    if: always() && (needs.smoke-test.result == 'success' || github.event_name != 'pull_request')
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version info

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install build twine setuptools_scm

    - name: Build package
      run: |
        python -m build

    - name: Check package metadata
      run: |
        twine check dist/* --strict

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 7

  # Optional docs build - only on docs changes
  docs:
    runs-on: ubuntu-latest
    needs: smoke-test
    if: always() && (needs.smoke-test.result == 'success' || github.event_name != 'pull_request') && (contains(github.event.head_commit.message, '[docs]') || github.event_name == 'workflow_dispatch')
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install -e .[docs] --prefer-binary

    - name: Build documentation
      run: |
        cd docs
        make clean html SPHINXOPTS="-W --keep-going"

    - name: Upload docs artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docs-${{ github.sha }}
        path: docs/_build/html/
        retention-days: 7

  # Security scanning - parallel with tests
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true  # Don't fail CI on security warnings

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety pip-audit

    - name: Run bandit security scan
      run: |
        bandit -r xpcs_toolkit -f json -o bandit-report.json || true
        bandit -r xpcs_toolkit --severity-level medium

    - name: Run pip-audit for dependency vulnerabilities
      run: |
        pip-audit --desc --format=json --output=pip-audit-report.json || true
        pip-audit --desc

    - name: Check dependencies with safety
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.json
          pip-audit-report.json
          safety-report.json
        retention-days: 30

  # Status check job - always runs
  status:
    runs-on: ubuntu-latest
    needs: [smoke-test, test, build, security]
    if: always()

    steps:
    - name: Check workflow status
      run: |
        if [ "${{ needs.smoke-test.result }}" = "failure" ]; then
          echo "‚ùå Smoke tests failed - blocking merge"
          exit 1
        elif [ "${{ needs.test.result }}" = "failure" ]; then
          echo "‚ùå Main tests failed - blocking merge"
          exit 1
        elif [ "${{ needs.build.result }}" = "failure" ]; then
          echo "‚ùå Build failed - blocking merge"
          exit 1
        else
          echo "‚úÖ All critical checks passed"
          echo "üîç Security: ${{ needs.security.result }}"
        fi
name: CI

on:
  # Temporarily disabled - will resume when codebase is more mature
  # push:
  #   branches: [ master, main, develop ]
  # pull_request:
  #   branches: [ master, main, develop ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual CI run'
        required: false
        default: 'Manual testing'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libegl1-mesa libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,docs]

    - name: Lint with ruff
      run: |
        ruff check --output-format=github .
        ruff format --check .

    - name: Type check with mypy
      run: |
        mypy src/xpcs_toolkit --ignore-missing-imports
      continue-on-error: true

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=xpcs_toolkit --cov-report=xml --cov-report=term-missing

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: Test package installation
      run: |
        pip install --force-reinstall dist/*.whl || echo "No wheel files found, skipping wheel test"
        python -c "import xpcs_toolkit; print('Package import successful')"

  build:
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version info

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools_scm

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ github.sha }}
        path: dist/

  docs:
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[docs]

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Upload docs artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docs-${{ github.sha }}
        path: docs/_build/html/

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run bandit security scan
      run: |
        bandit -r src/xpcs_toolkit -f json -o bandit-report.json || true
        bandit -r src/xpcs_toolkit

    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.json
          safety-report.json